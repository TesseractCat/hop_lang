static {
    //def! test [x: imp (+ '_ '_ -> 'out), y: imp (+ '_ '_ -> 'out)] -> 'out { + x y };
    //def! bar [x: imp (foo _ ? -> 'c)] -> 'c { x };
    //def! identity [x: 'a] -> 'a { x };
    //def identitytwo (fn [x: 'a] -> 'a { x });
    //print (imp + Number Number -> Number);
    //def addone (fn [x: '_ (imp identity ('_ (imp + Number Number -> '_)) -> '_)] -> Number { + x 1 });
    //def addone (fn [w: 'x, x: '_ (imp identity ('_ (imp + '_ '_ -> '_)) -> 'x)] -> 'x { + x 1 });
};
def! identity [x: 'a] -> 'a { x };
//identity "meow";
//def! test [x: 'a] -> String { + x "meow" };
//test 1;
def! foo [x: Number, y: String] -> Number { x };
def! bar [x: String, y: Number] -> Number { y };
def! testtwo [x: 'a (imp + 'a String -> String)] -> String { + x " meow hm" };
//def! testthree [x: 'a (imp + 'a 'a -> 'a)] -> 'a { + x x };
//print (testtwo "ba");
//print (identity (addone 1 2));

// x is a variable of type 'a, any 'a can be used with + like so: + 'a String -> String
// y is a variable of type 'b, any 'b can be used with + like so: + 'b 'b -> 'b
// - + 'b 1 won't work