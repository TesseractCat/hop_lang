static {
    //def! test [x: imp (+ '_ '_ -> 'out), y: imp (+ '_ '_ -> 'out)] -> 'out { + x y };
    //def! bar [x: imp (foo _ ? -> 'c)] -> 'c { x };
    //def! identity [x: 'a] -> 'a { x };
    //def identitytwo (fn [x: 'a] -> 'a { x });
    //print (imp + Number Number -> Number);
    def identity (fn [x: '_] -> '_ { x });
    def addone (fn [w: 'x, x: '_ (imp identity ('_ (imp + Number Number -> '_)) -> '_)] -> 'x { + x 1 });
};
print (addone "hi" 2);
//identity 'x